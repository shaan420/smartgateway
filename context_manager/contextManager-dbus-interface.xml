<?xml version="1.0" encoding="UTF-8" ?>
<!-- This maemo code example is licensed under a MIT-style license,
     that can be found in the file called "License" in the same
     directory as this file.
     Copyright (c) 2007 Nokia Corporation. All rights reserved. -->

<!-- If you keep the following DOCTYPE tag in your interface
     specification, xmllint can fetch the DTD over the Internet
     for validation automatically. -->
<!DOCTYPE node PUBLIC
  "-//freedesktop//DTD D-Bus Object Introspection 1.0//EN"
  "http://standards.freedesktop.org/dbus/1.0/introspect.dtd">

<!-- This file defines the D-Bus interface for a simple object, that
     will hold a simple state consisting of two values (one a 32-bit
     integer, the other a double).

     The object will always generate a signal when a value is changed
     (changed_value1 or changed_value2).

     It has also a min and max thresholds: when a client tries to
     set the value too high or too low, the object will generate a
     signal (outofrange_value1 or outofrange_value2).

     The thresholds are not modifiable (nor viewable) via this
     interface. They are specified in integers and apply to both
     internal values. Adding per-value thresholds would be a good
     idea. Generalizing the whole interface to support multiple
     concurrent values would be another good idea.

     The interface name is "org.maemo.Value".
     One known reference implementation is provided for it by the
     "/GlobalValue" object found via a well-known name of
     "org.maemo.Platdev_ex". -->

<node>
  <interface name="org.asu.smarthome.smartgateway.ContextManager">

    <!-- Method definitions -->

	<!-- new query from HTTP Server -->
    <method name="new_query_url">
      <arg type="s" name="query_type" direction="in"/>
      <arg type="s" name="params" direction="in"/>
      <arg type="s" name="response" direction="out"/>
    </method>

	<!-- new dev command from RuleManager -->
    <method name="dev_command">
      <arg type="s" name="command" direction="in"/>
      <arg type="s" name="response" direction="out"/>
    </method>

	<!-- device info request from RuleManager to 
				register signal handler for this device -->
	<method name="device_info">
	  <arg type="s" name="params" direction="in"/>
	  <arg type="s" name="response" direction="out"/>
	</method>

    <!-- Signal (D-Bus) definitions -->

    <!-- NOTE: The current version of dbus-bindings-tool doesn't
         actually enforce the signal arguments _at_all_. Signals need
         to be declared in order to be passed through the bus itself,
         but otherwise no checks are done! For example, you could
         leave the signal arguments unspecified completely, and the
         code would still work. -->

	<!-- Signals to tell interested clients about state change.
		 We send a string parameter with them. They never can have
		 arguments with direction=in. -->
	<signal name="new_query">
		<arg type="s" name="new_query" direction="out"/>
	</signal>

    <!-- Signals to tell interested clients that values are outside
         the internally configured range (thresholds). -->
    <signal name="error_detected">
      <arg type="s" name="error_reason" direction="out"/>
    </signal>

  </interface>
</node>
